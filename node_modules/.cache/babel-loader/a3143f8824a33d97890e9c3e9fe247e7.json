{"ast":null,"code":"var _jsxFileName = \"C:\\\\apollo-react-graphql-master\\\\apollo-react-graphql-master\\\\src\\\\Components\\\\Job.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\"; // GQ Query to fetch all the JOBS\n\nconst JOBS = gql`\n  {\n    jobs {\n      id\n      title\n      isPublished\n      description\n      slug\n      company {\n        name\n        slug\n      }\n      userEmail\n      applyUrl\n    }\n  }\n`;\nexport default function Job(props) {\n  let [jobs, setJobs] = useState([]);\n  const {\n    loading,\n    data\n  } = useQuery(JOBS);\n\n  const onChange = e => {\n    let j = jobs.filter(j => j.title.toLowerCase().includes(e.target.value.toLowerCase()) || j.company.name.toLowerCase().includes(e.target.value.toLowerCase()));\n  };\n\n  useEffect(() => {\n    if (data) {\n      console.log(data, 'data responsed');\n      setJobs(data.jobs);\n    }\n  }, [data]);\n  if (loading) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 6\n    }\n  }, \"loading....\")); // set state when API returns record the first time. will be called only once\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 6\n    }\n  }, \"joblist data\", jobs.length), jobs.map(function (item, i) {\n    console.log(item, 'index i', i);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 3\n      }\n    }, item && item.id), /*#__PURE__*/React.createElement(\"li\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 3\n      }\n    }, item && item.item), /*#__PURE__*/React.createElement(\"li\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 3\n      }\n    }, item && item.isPublished), /*#__PURE__*/React.createElement(\"li\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 3\n      }\n    }, item && item.description), /*#__PURE__*/React.createElement(\"li\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 3\n      }\n    }, item && item.company));\n  }));\n}","map":{"version":3,"sources":["C:/apollo-react-graphql-master/apollo-react-graphql-master/src/Components/Job.js"],"names":["React","useState","useEffect","useQuery","gql","JOBS","Job","props","jobs","setJobs","loading","data","onChange","e","j","filter","title","toLowerCase","includes","target","value","company","name","console","log","length","map","item","i","id","isPublished","description"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAASC,GAAT,QAAoB,cAApB,C,CAEA;;AACA,MAAMC,IAAI,GAAGD,GAAI;;;;;;;;;;;;;;;;CAAjB;AAkBA,eAAe,SAASE,GAAT,CAAaC,KAAb,EAAoB;AAEjC,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAA9B;AAEA,QAAM;AAAES,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBR,QAAQ,CAACE,IAAD,CAAlC;;AACA,QAAMO,QAAQ,GAAGC,CAAC,IAAI;AACpB,QAAIC,CAAC,GAAGN,IAAI,CAACO,MAAL,CAAYD,CAAC,IACjBA,CAAC,CAACE,KAAF,CAAQC,WAAR,GAAsBC,QAAtB,CAA+BL,CAAC,CAACM,MAAF,CAASC,KAAT,CAAeH,WAAf,EAA/B,KACAH,CAAC,CAACO,OAAF,CAAUC,IAAV,CAAeL,WAAf,GAA6BC,QAA7B,CAAsCL,CAAC,CAACM,MAAF,CAASC,KAAT,CAAeH,WAAf,EAAtC,CAFI,CAAR;AAKD,GAND;;AAOAf,EAAAA,SAAS,CAAC,MAAM;AAEhB,QAAGS,IAAH,EAAQ;AACNY,MAAAA,OAAO,CAACC,GAAR,CAAYb,IAAZ,EAAiB,gBAAjB;AACAF,MAAAA,OAAO,CAACE,IAAI,CAACH,IAAN,CAAP;AACD;AAGA,GARQ,EAQN,CAACG,IAAD,CARM,CAAT;AASA,MAAID,OAAJ,EACE,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADA,CADD,CAtB+B,CA2BjC;;AAGA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAgBF,IAAI,CAACiB,MAArB,CADF,EAEGjB,IAAI,CAACkB,GAAL,CAAS,UAASC,IAAT,EAAeC,CAAf,EAAiB;AACzBL,IAAAA,OAAO,CAACC,GAAR,CAAYG,IAAZ,EAAiB,SAAjB,EAA2BC,CAA3B;AACL,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACP;AAAI,MAAA,GAAG,EAAEA,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaD,IAAI,IAAIA,IAAI,CAACE,EAA1B,CADO,eAEP;AAAI,MAAA,GAAG,EAAED,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaD,IAAI,IAAIA,IAAI,CAACA,IAA1B,CAFO,eAGP;AAAI,MAAA,GAAG,EAAEC,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaD,IAAI,IAAIA,IAAI,CAACG,WAA1B,CAHO,eAIP;AAAI,MAAA,GAAG,EAAEF,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaD,IAAI,IAAIA,IAAI,CAACI,WAA1B,CAJO,eAKP;AAAI,MAAA,GAAG,EAAEH,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAaD,IAAI,IAAIA,IAAI,CAAEN,OAA3B,CALO,CAAP;AAOD,GATK,CAFH,CADD;AAeD","sourcesContent":["import React, { useState,useEffect } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n\n// GQ Query to fetch all the JOBS\nconst JOBS = gql`\n  {\n    jobs {\n      id\n      title\n      isPublished\n      description\n      slug\n      company {\n        name\n        slug\n      }\n      userEmail\n      applyUrl\n    }\n  }\n`;\n\nexport default function Job(props) {\n  \n  let [jobs, setJobs] = useState([]);\n  \n  const { loading, data } = useQuery(JOBS);\n  const onChange = e => {\n    let j = jobs.filter(j =>\n        j.title.toLowerCase().includes(e.target.value.toLowerCase()) ||\n        j.company.name.toLowerCase().includes(e.target.value.toLowerCase())\n    );\n    \n  };\n  useEffect(() => {\n\n  if(data){\n    console.log(data,'data responsed');\n    setJobs(data.jobs);\n  }\n    \n    \n  }, [data])\n  if (loading)\n    return (\n     <div>\n     <h1>loading....</h1>\n      </div>\n    );\n  // set state when API returns record the first time. will be called only once\n \n\n  return (\n   <div>\n     <p>joblist data{jobs.length}</p>\n     {jobs.map(function(item, i){\n       console.log(item,'index i',i);\n  return <div>\n  <li key={i}>{item && item.id}</li>\n  <li key={i}>{item && item.item}</li>\n  <li key={i}>{item && item.isPublished}</li>\n  <li key={i}>{item && item.description}</li>\n  <li key={i}>{item && item. company}</li>\n  </div>\n})}\n   </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}