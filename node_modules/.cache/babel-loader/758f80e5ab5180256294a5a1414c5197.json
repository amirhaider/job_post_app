{"ast":null,"code":"var _jsxFileName = \"C:\\\\apollo-react-graphql-master\\\\apollo-react-graphql-master\\\\src\\\\Components\\\\Job.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\"; // GQ Query to fetch all the JOBS\n\nconst JOBS = gql`\n  {\n    jobs {\n      id\n      title\n      isPublished\n      description\n      slug\n      company {\n        name\n        slug\n      }\n      userEmail\n      applyUrl\n    }\n  }\n`;\nexport default function Job(props) {\n  let [jobs, setJobs] = useState([]);\n  const {\n    loading,\n    data\n  } = useQuery(JOBS);\n\n  const onChange = e => {\n    let j = jobs.filter(j => j.title.toLowerCase().includes(e.target.value.toLowerCase()) || j.company.name.toLowerCase().includes(e.target.value.toLowerCase()));\n    setFiltered(j);\n  };\n\n  useEffect(() => {\n    if (data) {\n      console.log(data, 'data responsed');\n    }\n  }, [data]);\n  if (loading) return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 6\n    }\n  }, \"loading....\")); // set state when API returns record the first time. will be called only once\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    class: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    placeholder: \"plz enter data\",\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"inbox-widget chart-content-bg mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, filtered && filtered.map(({\n    id,\n    title,\n    isPublished,\n    description,\n    slug,\n    company,\n    applyUrl,\n    userEmail\n  }) => /*#__PURE__*/React.createElement(\"div\", {\n    class: \"inbox-item custom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"inbox-item-img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"custom-control custom-checkbox mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    class: \"custom-control-input\",\n    id: id,\n    checked: isPublished,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    class: \"custom-control-label\",\n    for: id,\n    title: \"Published\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 23\n    }\n  }), company && /*#__PURE__*/React.createElement(\"a\", {\n    href: `/jobs/${slug}/${company.slug}`,\n    class: \"btn btn-sm text-info font-18\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 25\n    }\n  }, title), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 23\n    }\n  }, \"at \"), \" \", /*#__PURE__*/React.createElement(\"b\", {\n    className: \"text-danger font-16\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 23\n    }\n  }, company.name)), /*#__PURE__*/React.createElement(\"p\", {\n    class: \"inbox-item-text description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }, description), /*#__PURE__*/React.createElement(\"p\", {\n    class: \"inbox-item-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  }, company && /*#__PURE__*/React.createElement(\"a\", {\n    href: `/jobs/${slug}/${company.slug}`,\n    class: \"btn btn-sm btn-link text-info font-13\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 25\n    }\n  }, \"View Details\")), userEmail && /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 25\n    }\n  }, \"Posted By:\"), \" \", /*#__PURE__*/React.createElement(\"a\", {\n    href: `mailto:${userEmail}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 25\n    }\n  }, \" \", userEmail))))))));\n}","map":{"version":3,"sources":["C:/apollo-react-graphql-master/apollo-react-graphql-master/src/Components/Job.js"],"names":["React","useState","useEffect","useQuery","gql","JOBS","Job","props","jobs","setJobs","loading","data","onChange","e","j","filter","title","toLowerCase","includes","target","value","company","name","setFiltered","console","log","filtered","map","id","isPublished","description","slug","applyUrl","userEmail"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n\n// GQ Query to fetch all the JOBS\nconst JOBS = gql`\n  {\n    jobs {\n      id\n      title\n      isPublished\n      description\n      slug\n      company {\n        name\n        slug\n      }\n      userEmail\n      applyUrl\n    }\n  }\n`;\n\nexport default function Job(props) {\n  \n  let [jobs, setJobs] = useState([]);\n  \n  const { loading, data } = useQuery(JOBS);\n  const onChange = e => {\n    let j = jobs.filter(j =>\n        j.title.toLowerCase().includes(e.target.value.toLowerCase()) ||\n        j.company.name.toLowerCase().includes(e.target.value.toLowerCase())\n    );\n    setFiltered(j);\n  };\n  useEffect(() => {\n\n  if(data){\n    console.log(data,'data responsed');\n  }\n    \n    \n  }, [data])\n  if (loading)\n    return (\n     <div>\n     <h1>loading....</h1>\n      </div>\n    );\n  // set state when API returns record the first time. will be called only once\n \n\n  return (\n    <div class=\"form-group\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"plz enter data\"\n            onChange={onChange}\n          />\n          <div class=\"inbox-widget chart-content-bg mt-2\">\n            {filtered &&\n              filtered.map(\n                ({\n                  id,\n                  title,\n                  isPublished,\n                  description,\n                  slug,\n                  company,\n                  applyUrl,\n                  userEmail\n                }) => (\n                  <div class=\"inbox-item custom\">\n                    <div class=\"inbox-item-img\"></div>\n                    <div class=\"custom-control custom-checkbox mb-2\">\n                      <input\n                        type=\"checkbox\"\n                        class=\"custom-control-input\"\n                        id={id}\n                        checked={isPublished}\n                      />\n                      <label\n                        class=\"custom-control-label\"\n                        for={id}\n                        title=\"Published\"\n                      ></label>\n                      {company && (\n                        <a\n                          href={`/jobs/${slug}/${company.slug}`}\n                          class=\"btn btn-sm text-info font-18\"\n                        >\n                          {title}\n                        </a>\n                      )}\n                      <small>at </small>{\" \"}\n                      <b className=\"text-danger font-16\">{company.name}</b>\n                    </div>\n                    <p class=\"inbox-item-text description\">{description}</p>\n                    <p class=\"inbox-item-date\">\n                      \n                      {company && (\n                        <a\n                          href={`/jobs/${slug}/${company.slug}`}\n                          class=\"btn btn-sm btn-link text-info font-13\"\n                        >\n                          View Details\n                        </a>\n                      )}\n                    </p>\n                    {userEmail && (\n                      <p className=\"mt-2\">\n                        <strong>Posted By:</strong>{\" \"}\n                        <a href={`mailto:${userEmail}`}> {userEmail}</a>\n                      </p>\n                    )}\n                  </div>\n                )\n              )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}