{"ast":null,"code":"var _jsxFileName = \"C:\\\\trimulabs projects\\\\job_post_app\\\\job_post_app\\\\src\\\\Components\\\\Jobs.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport \"../style/base/base.css\";\nimport \"../style/component/jobs.css\"; // GQ Query to fetch all the JOBS\n\nconst JOBS = gql`\n  {\n    jobs {\n      id\n      title\n      isPublished\n      description\n      slug\n      company {\n        name\n        slug\n      }\n      userEmail\n      applyUrl\n    }\n  }\n`;\nexport default function Job(props) {\n  let [jobs, setJobs] = useState([]);\n  let [filter, setfilter] = useState([]);\n  const {\n    loading,\n    data\n  } = useQuery(JOBS);\n  useEffect(() => {\n    if (data) {\n      setJobs(data.jobs);\n      setfilter(data.jobs);\n    }\n  }, [data]);\n\n  const onChange = e => {\n    let f = jobs.filter(f => f.title.toLowerCase().includes(e.target.value.toLowerCase()) || f.company.name.toLowerCase().includes(e.target.value.toLowerCase())); // set State to re-render the component\n\n    setfilter(f);\n  };\n\n  if (loading) return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 6\n    }\n  }, \"loading....\"));\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form\",\n    placeholder: \"Enter Job or Company for serch\",\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }), filter.map(function (item, i) {\n    console.log(item, i);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main_div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 10\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"main_data_div\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      className: \"custom_checkbox\",\n      id: item.id,\n      checked: item.isPublished,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 3\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      class: \"label\",\n      for: item.id,\n      title: \"Published\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 23\n      }\n    }), item.company && /*#__PURE__*/React.createElement(\"a\", {\n      href: `/jobs/${item.slug}/${item.company.slug}`,\n      class: \"title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }\n    }, item.title), /*#__PURE__*/React.createElement(\"small\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 23\n      }\n    }, \"at \"), \" \", /*#__PURE__*/React.createElement(\"b\", {\n      className: \"company_name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 23\n      }\n    }, item.company.name), /*#__PURE__*/React.createElement(\"p\", {\n      class: \"apply_view\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: item.applyUrl,\n      className: \"apply\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 23\n      }\n    }, \"Apply\"), item.company && /*#__PURE__*/React.createElement(\"a\", {\n      href: `/jobs/${item.slug}/${item.company.slug}`,\n      className: \"view_details\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }\n    }, \"View Details\")), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 23\n      }\n    }, item.description), item.userEmail && /*#__PURE__*/React.createElement(\"p\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    }, \"Posted By:\"), \" \", /*#__PURE__*/React.createElement(\"a\", {\n      href: item.userEmail,\n      cl: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 25\n      }\n    }, \" \", item.userEmail)))));\n  }));\n}","map":{"version":3,"sources":["C:/trimulabs projects/job_post_app/job_post_app/src/Components/Jobs.js"],"names":["React","useState","useEffect","useQuery","gql","JOBS","Job","props","jobs","setJobs","filter","setfilter","loading","data","onChange","e","f","title","toLowerCase","includes","target","value","company","name","map","item","i","console","log","id","isPublished","slug","applyUrl","description","userEmail"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport \"../style/base/base.css\";\nimport \"../style/component/jobs.css\";\n\n\n\n\n// GQ Query to fetch all the JOBS\nconst JOBS = gql`\n  {\n    jobs {\n      id\n      title\n      isPublished\n      description\n      slug\n      company {\n        name\n        slug\n      }\n      userEmail\n      applyUrl\n    }\n  }\n`;\n\nexport default function Job(props) {\n  \n  let [jobs, setJobs] = useState([]);\n  let [filter, setfilter] = useState([]);\n  const { loading, data } = useQuery(JOBS);\n  useEffect(() => {\n    if(data){\n    \n    setJobs(data.jobs);\n    setfilter(data.jobs);\n  }\n    \n    \n  }, [data])\n  const onChange = e => {\n    let f = jobs.filter(\n      f =>\n        f.title.toLowerCase().includes(e.target.value.toLowerCase()) ||\n        f.company.name.toLowerCase().includes(e.target.value.toLowerCase())\n    );\n    // set State to re-render the component\n    setfilter(f);\n  };\n  if (loading)\n    return (\n     <div className=\"loading\">\n     <h1>loading....</h1>\n      </div>\n    );\n  \n \n\n  return (\n   <div>\n    <input\n            \n            type=\"text\"\n            className=\"form\"\n            placeholder=\"Enter Job or Company for serch\"\n            onChange={onChange}\n          />\n          \n     \n     {filter.map(function(item, i){\n       console.log(item,i);\n  return <div className=\"main_div\">\n  <div className=\"main_data_div\">\n  <div className=\"data\">\n  <input\n                        type=\"checkbox\"\n                        className=\"custom_checkbox\"\n                        id={item.id}\n                        checked={item.isPublished}\n                      />\n                      <label\n                        class=\"label\"\n                        for={item.id}\n                        title=\"Published\"\n                        \n                      ></label>\n                      {item.company && (\n                        <a\n                          href={`/jobs/${item.slug}/${item.company.slug}`}\n                          class=\"title\"\n                        >\n                          {item.title}\n                        </a>\n                        \n                      )}\n                      <small>at </small>{\" \"}\n                      <b className=\"company_name\">{item.company.name}</b>\n                      <p class=\"apply_view\">\n                      <a\n                        href={item.applyUrl}\n                        className=\"apply\"\n                      >\n                        Apply\n                      </a>\n                      {item.company && (\n                        <a\n                          href={`/jobs/${item.slug}/${item.company.slug}`}\n                          className=\"view_details\"\n                        >\n                          View Details\n                        </a>\n                      )}\n                    </p>\n                      <p className=\"description\">{item.description}</p>\n                      {item.userEmail && (\n                      <p className=\"\">\n                        <strong>Posted By:</strong>{\" \"}\n                        <a href={item.userEmail} cl> {item.userEmail}</a>\n                      </p>\n                    )}\n                      \n                     \n\n  \n  \n  \n  \n  </div>\n  </div>\n  </div>\n})}\n   </div>\n  \n  );\n}\n"]},"metadata":{},"sourceType":"module"}