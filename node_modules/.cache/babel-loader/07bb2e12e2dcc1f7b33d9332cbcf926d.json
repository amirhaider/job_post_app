{"ast":null,"code":"var _jsxFileName = \"C:\\\\apollo-react-graphql-master\\\\apollo-react-graphql-master\\\\src\\\\Components\\\\JobDetails.js\";\nimport React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport { useParams } from \"react-router\"; // Call Graphql API to fetch record matching company and job Slug properties requried by API\n\nconst GET_JOB = gql`\n  query getJob($companySlug: String!, $jobSlug: String!) {\n    job(input: { companySlug: $companySlug, jobSlug: $jobSlug }) {\n      id\n      title\n      isPublished\n      description\n      company {\n        name\n      }\n      userEmail\n      applyUrl\n    }\n  }\n`;\nexport default function JobDetails(props) {\n  // usePrams is used to read params and then call the API to fetch details\n  const {\n    job_slug,\n    company_slug\n  } = useParams();\n  let [job, setJob] = useState({}); // useQuery is apollo Hook to call GQ API\n\n  const {\n    loading,\n    data\n  } = useQuery(GET_JOB, {\n    variables: {\n      jobSlug: job_slug,\n      companySlug: company_slug\n    }\n  }); // setState when first api call is made. very important to mange state in hooks\n\n  if (!Object.keys(job).length && data && data.job) {\n    setJob(data.job);\n  } // Show user that data is being fetched from the backend.\n\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      class: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"card-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      class: \"header-title mb-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, \"Job Details \"), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"inbox-widget mt-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 15\n      }\n    }, \"Loading...\")))));\n  } // Destructuring the the state element\n\n\n  const {\n    id,\n    title,\n    isPublished,\n    description,\n    company,\n    applyUrl\n  } = job;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    class: \"form-group\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"card-body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    class: \"header-title mb-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, \"Job Details\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"inbox-widget mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"inbox-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"inbox-item-img\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"custom-control custom-checkbox mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"checkbox\",\n    class: \"custom-control-input\",\n    id: id,\n    checked: isPublished,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    class: \"custom-control-label\",\n    for: id,\n    title: \"Published\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"a\", {\n    href: \"javascript:void(0)\",\n    class: \"btn btn-sm text-info font-18\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, title), /*#__PURE__*/React.createElement(\"small\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }, \"at \"), \" \", company && /*#__PURE__*/React.createElement(\"b\", {\n    className: \"text-danger font-16\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 19\n    }\n  }, company.name)), /*#__PURE__*/React.createElement(\"p\", {\n    class: \"detailed-description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }\n  }, description), /*#__PURE__*/React.createElement(\"p\", {\n    class: \"inbox-item-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    href: applyUrl,\n    rel: \"noopener noreferrer\",\n    target: \"_blank\",\n    class: \"btn btn-sm btn-primary font-13\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, \"Apply\")))))));\n}","map":{"version":3,"sources":["C:/apollo-react-graphql-master/apollo-react-graphql-master/src/Components/JobDetails.js"],"names":["React","useState","useQuery","gql","useParams","GET_JOB","JobDetails","props","job_slug","company_slug","job","setJob","loading","data","variables","jobSlug","companySlug","Object","keys","length","id","title","isPublished","description","company","applyUrl","name"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport { useParams } from \"react-router\";\n\n// Call Graphql API to fetch record matching company and job Slug properties requried by API\nconst GET_JOB = gql`\n  query getJob($companySlug: String!, $jobSlug: String!) {\n    job(input: { companySlug: $companySlug, jobSlug: $jobSlug }) {\n      id\n      title\n      isPublished\n      description\n      company {\n        name\n      }\n      userEmail\n      applyUrl\n    }\n  }\n`;\n\nexport default function JobDetails(props) {\n  // usePrams is used to read params and then call the API to fetch details\n  const { job_slug, company_slug } = useParams();\n  let [job, setJob] = useState({});\n  // useQuery is apollo Hook to call GQ API\n  const { loading, data } = useQuery(GET_JOB, {\n    variables: {\n      jobSlug: job_slug,\n      companySlug: company_slug\n    }\n  });\n\n  // setState when first api call is made. very important to mange state in hooks\n  if (!Object.keys(job).length && data && data.job) {\n    setJob(data.job);\n  }\n  // Show user that data is being fetched from the backend.\n  if (loading) {\n    return (\n      <div class=\"form-group\">\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <h4 class=\"header-title mb-3\">Job Details </h4>\n            <div class=\"inbox-widget mt-2\">\n              <h3>Loading...</h3>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  // Destructuring the the state element\n  const { id, title, isPublished, description, company, applyUrl } = job;\n  return (\n    <div class=\"form-group\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <h4 class=\"header-title mb-3\">Job Details</h4>\n          <div class=\"inbox-widget mt-2\">\n            <div class=\"inbox-item\">\n              <div class=\"inbox-item-img\"></div>\n              <div class=\"custom-control custom-checkbox mb-2\">\n                <input\n                  type=\"checkbox\"\n                  class=\"custom-control-input\"\n                  id={id}\n                  checked={isPublished}\n                />\n                <label\n                  class=\"custom-control-label\"\n                  for={id}\n                  title=\"Published\"\n                ></label>\n                <a\n                  href=\"javascript:void(0)\"\n                  class=\"btn btn-sm text-info font-18\"\n                >\n                  {title}\n                </a>\n                <small>at </small>{\" \"}\n                {company && (\n                  <b className=\"text-danger font-16\">{company.name}</b>\n                )}\n              </div>\n              <p class=\"detailed-description\">{description}</p>\n              <p class=\"inbox-item-date\">\n                <a\n                  href={applyUrl}\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                  class=\"btn btn-sm btn-primary font-13\"\n                >\n                  Apply\n                </a>\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}